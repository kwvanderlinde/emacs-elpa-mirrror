(1
 (a . [(1 0 0) ((emacs (25))) "Associative data structure functions" tar])
 (ac-emacs-eclim . [(0 4) ((eclim (0 3)) (auto-complete (1 5))) "auto-complete source for eclim" tar])
 (ace-window . [(0 10 0) ((avy (0 5 0))) "Quickly switch windows." tar])
 (async . [(1 9 9) ((emacs (24 4))) "Asynchronous processing in Emacs" tar])
 (auctex . [(14 0 9) ((emacs (27 1))) "Integrated environment for *TeX*" tar])
 (auto-complete . [(1 5 1) ((popup (0 5 0)) (cl-lib (0 5))) "Auto Completion for GNU Emacs" tar])
 (autodisass-java-bytecode . [(1 3) nil "Automatically disassemble Java bytecode" tar])
 (avy . [(0 5 0) ((emacs (24 1)) (cl-lib (0 5))) "Jump to arbitrary positions in visible text and select text quickly." tar])
 (bind-key . [(2 4 4) ((emacs (24 3))) "A simple way to manage personal keybindings" tar])
 (bui . [(1 2 1) ((emacs (24 3)) (dash (2 11 0))) "Buffer interface library" tar])
 (caml . [(4 9) ((emacs (24 3))) "Caml mode for GNU Emacs" tar])
 (cfrs . [(1 6 0) ((emacs (26 1)) (dash (2 11 0)) (s (1 10 0)) (posframe (0 6 0))) "Childstring" tar])
 (cider . [(1 17 1) ((emacs (26)) (clojure-mode (5 19)) (parseedn (1 2 1)) (queue (0 2)) (spinner (1 7)) (seq (2 22)) (sesman (0 3 2)) (transient (0 4 1))) "Clojure Interactive Development Environment that Rocks." tar])
 (clang-format . [(20250223 1620) ((cl-lib (0 3))) "Format code using clang-format." tar])
 (clojure-mode . [(5 19 0) ((emacs (25 1))) "Major mode for Clojure code" tar])
 (cmake-ide . [(0 5) ((emacs (24 1)) (cl-lib (0 5)) (seq (1 11)) (levenshtein (0))) "Calls CMake to find out include paths and other compiler flags" tar])
 (cmake-mode . [(3 31 6) ((emacs (24 1))) "Major-mode for editing CMake sources." tar])
 (color-theme-sanityinc-tomorrow . [(1 17) nil "A version of Chris Kempson's various Tomorrow themes" tar])
 (company . [(1 0 2) ((emacs (25 1))) "Modular text completion framework." tar])
 (compat . [(30 0 2 0) ((emacs (24 4)) (seq (2 23))) "Emacs Lisp Compatibility Library" tar])
 (csv-mode . [(1 27) ((emacs (27 1)) (cl-lib (0 5))) "Major mode for editing comma/char separated values" tar])
 (d-mode . [(20241225 1823) ((emacs (25 1))) "D Programming Language major mode for (X)Emacs." tar])
 (dap-mode . [(0 8) ((emacs (27 1)) (dash (2 18 0)) (lsp-mode (6 0)) (bui (1 1 0)) (f (0 20 0)) (s (1 12 0)) (lsp-treemacs (0 1)) (posframe (0 7 0)) (ht (2 3)) (lsp-docker (1 0 0))) "Debug Adapter Protocol mode" tar])
 (darkokai-theme . [(20250317 1704) nil "A darker variant on Monokai." tar])
 (dash . [(2 20 0) ((emacs (24))) "A modern list library for Emacs." tar])
 (dash-functional . [(2 20 0) ((dash (2 18 0))) "Collection of useful combinators for Emacs Lisp." tar])
 (eclim . [(0 4) ((dash (2 11 0)) (json (1 2)) (popup (0 5 2)) (s (1 9 0)) (cl-lib (0 5)) (yasnippet (0 10 0))) "An interface to the Eclipse IDE." tar])
 (eglot . [(1 18) ((emacs (26 3)) (compat (27 1)) (eldoc (1 14 0)) (external-completion (0 1)) (flymake (1 2 1)) (jsonrpc (1 0 24)) (project (0 9 8)) (seq (2 23)) (track-changes (1 2)) (xref (1 6 2))) "The Emacs Client for LSP servers" tar])
 (eldoc . [(1 15 0) ((emacs (26 3))) "Show function arglist or variable docstring in echo area" tar])
 (elpy . [(1 35 0) ((company (0 9 2)) (emacs (24 4)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0)) (s (1 11 0))) "Emacs Python Development Environment" tar])
 (emacsql . [(4 2 0) ((emacs (26 1))) "Highend." tar])
 (emacsql-sqlite . [(4 0 3) nil "EmacSQL back-end for SQLite" tar])
 (emojify . [(1 2) ((seq (1 11)) (ht (2 0)) (emacs (24 3))) "Display emojis in Emacs" tar])
 (epl . [(0 9) ((cl-lib (0 3))) "Emacs Package Library" tar])
 (external-completion . [(0 1) nil "Let external tools control completion style" tar])
 (f . [(0 21 0) ((emacs (24 1)) (s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories." tar])
 (fish-mode . [(0 1 6) ((emacs (24))) "Major mode for fish shell scripts" tar])
 (flycheck . [(34 1) ((emacs (26 1))) "Onfly syntax checking" tar])
 (flycheck-cask . [(0 4) ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) "Cask support in Flycheck" tar])
 (flycheck-mypy . [(20200113 1336) ((flycheck (0 18))) "Support mypy in flycheck" tar])
 (flymake . [(1 3 7) ((emacs (26 1)) (eldoc (1 14 0)) (project (0 7 1))) "A universal onfly syntax checker" tar])
 (fsharp-mode . [(2 0) ((emacs (25))) "Support for the F# programming language" tar])
 (gdscript-mode . [(1 4 0) ((emacs (26 3))) "Major mode for Godot's GDScript language." tar])
 (ghub . [(4 2 2) ((emacs (29 1)) (compat (30 0 2 0)) (let-alist (1 0 6)) (llama (0 6 1)) (treepy (0 1 2))) "Client libraries for Git forge APIs." tar])
 (git . [(0 1 1) ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) "An Elisp API for programmatically using Git" tar])
 (git-commit . [(4 1 0) nil "Edit Git commit messages" tar])
 (git-modes . [(1 4 4) ((emacs (26 1)) (compat (30 0 0 0))) "Major modes for editing Git configuration files" tar])
 (gitignore-mode . [(1 2 8) nil "Major mode for editing .gitignore files" tar])
 (gitignore-templates . [(1 0) ((emacs (24 3))) "Create .gitignore using GitHub or gitignore.io API" tar])
 (glsl-mode . [(20241021 919) ((emacs (26 1))) "Major mode for Open GLSL shader files." tar])
 (gradle-mode . [(0 5 5) ((s (1 8 0))) "Gradle integration with Emacs' compile" tar])
 (haskell-mode . [(17 5) ((emacs (25 1))) "A Haskell editing mode" tar])
 (hide-lines . [(20210513 1636) nil "Commands for hiding lines based on a regexp" tar])
 (highlight-indentation . [(0 7 0) nil "Minor modes for highlighting indentation" tar])
 (ht . [(2 3) ((dash (2 12 0))) "The missing hash table library for Emacs" tar])
 (hydra . [(0 15 0) ((cl-lib (0 5)) (lv (0))) "Make bindings that stick around." tar])
 (ivy . [(0 15 0) ((emacs (24 5))) "Incremental Vertical completYon." tar])
 (jsonian . [(0 1 0) ((emacs (27 1))) "A major mode for editing JSON files" tar])
 (jsonrpc . [(1 0 25) ((emacs (25 2))) "JSON-RPC library" tar])
 (levenshtein . [(20090830 1040) nil "Edit distance between two strings." tar])
 (llama . [(0 6 2) ((emacs (26 1)) (compat (30 0 2 0))) "Compact syntax for short lambda." tar])
 (lorem-ipsum . [(20221214 1857) nil "Insert dummy pseudo Latin text" tar])
 (lsp-docker . [(20250228 2210) ((emacs (28 1)) (dash (2 14 1)) (lsp-mode (6 2 1)) (f (0 20 0)) (s (1 13 0)) (yaml (0 2 0)) (ht (2 0))) "LSP Docker integration." tar])
 (lsp-java . [(3 1) ((emacs (25 1)) (lsp-mode (6 0)) (markdown-mode (2 3)) (dash (2 14 1)) (f (0 20 0)) (ht (2 0)) (dash-functional (1 2 0)) (request (0 3 0)) (treemacs (2 5)) (dap-mode (0 5))) "Java support for lsp-mode" tar])
 (lsp-mode . [(9 0 0) ((emacs (27 1)) (dash (2 18 0)) (f (0 20 0)) (ht (2 3)) (spinner (1 7 3)) (markdown-mode (2 3)) (lv (0)) (eldoc (1 11))) "LSP mode" tar])
 (lsp-treemacs . [(0 5) ((emacs (27 1)) (dash (2 18 0)) (f (0 20 0)) (ht (2 0)) (treemacs (2 5)) (lsp-mode (6 0))) "LSP treemacs" tar])
 (lsp-ui . [(9 0 0) ((emacs (27 1)) (dash (2 18 0)) (lsp-mode (6 0)) (markdown-mode (2 3))) "UI modules for lsp-mode" tar])
 (lv . [(0 15 0) nil "Other echo area" tar])
 (macrostep . [(0 9 5) ((cl-lib (0 5)) (compat (29))) "Interactive macro expander." tar])
 (magit . [(4 3 1) ((emacs (27 1)) (compat (30 0 2 0)) (llama (0 6 1)) (magit-section (4 3 1)) (seq (2 24)) (transient (0 8 5)) (with-editor (3 4 3))) "A Git porcelain inside Emacs." tar])
 (magit-popup . [(2 13 3) ((emacs (24 4)) (dash (2 13 0))) "Define prefixsuffix command combos" tar])
 (magit-section . [(4 3 1) ((emacs (27 1)) (compat (30 0 2 0)) (llama (0 6 1)) (seq (2 24))) "Sections for read-only buffers." tar])
 (markdown-mode . [(20250314 311) ((emacs (28 1))) "Major mode for Markdown-formatted text." tar])
 (mmm-mode . [(0 5 11) ((emacs (25 1)) (cl-lib (0 2))) "Allow Multiple Major Modes in a buffer" tar])
 (monokai-alt-theme . [(20170630 2048) ((emacs (24))) "Theme with a dark background. Based on sublime monokai theme." tar])
 (monokai-pro-theme . [(20250116 1621) nil "A simple theme based on the Monokai Pro Sublime color schemes." tar])
 (monokai-theme . [(3 5 3) nil "A fruity color theme for Emacs." tar])
 (neon-mode . [(1 3 0) nil "Simple major mode for editing neon files" tar])
 (neotree . [(0 6 0) ((cl-lib (0 5))) "A tree plugin like NerdTree for Vim" tar])
 (nginx-mode . [(1 1 10) nil "Major mode for editing nginx config files." tar])
 (org-roam . [(2 2 2) ((emacs (26 1)) (dash (2 13)) (org (9 4)) (emacsql (3 0 0)) (emacsql-sqlite (1 0 0)) (magit-section (3 0 0))) "A database abstraction layer for Org-mode" tar])
 (ov . [(20230522 1117) ((emacs (24 3))) "Overlay library for Emacs Lisp" tar])
 (ox-mediawiki . [(20230425 115) ((cl-lib (0 5)) (s (1 9 0))) "Mediawiki Back-End for Org Export Engine." tar])
 (page-break-lines . [(0 15) ((emacs (24 4))) "Display ^L page breaks as tidy horizontal lines" tar])
 (parseclj . [(1 1 1) ((emacs (25))) "Clojure/EDN parser" tar])
 (parseedn . [(1 2 1) ((emacs (26)) (parseclj (1 1 1)) (map (2))) "Clojure/EDN parser" tar])
 (pfuture . [(1 10 3) ((emacs (25 2))) "a simple wrapper around asynchronous processes" tar])
 (php-mode . [(20250109 2103) ((emacs (27 1))) "Major mode for editing PHP code." tar])
 (pkg-info . [(0 6) ((epl (0 8))) "Information about packages" tar])
 (popup . [(0 5 9) ((emacs (24 3))) "Visual Popup User Interface" tar])
 (posframe . [(1 4 4) ((emacs (26 1))) "Pop a posframe (just a frame) at point" tar])
 (powerline . [(2 4) ((cl-lib (0 2))) "Rewrite of Powerline" tar])
 (project . [(0 11 1) ((emacs (26 1)) (xref (1 7 0))) "Operations on the current project" tar])
 (projectile . [(2 9 1) ((emacs (26 1))) "Manage and navigate projects in Emacs easily." tar])
 (pyvenv . [(1 21) nil "Python virtual environment interface" tar])
 (queue . [(0 2) nil "Queue data structure" tar])
 (request . [(0 3 2) ((emacs (24 4))) "Compatible layer for URL request in Emacs" tar])
 (rich-minority . [(1 0 3) ((cl-lib (0 5))) "Cleanmodes." tar])
 (rpm-spec-mode . [(20241209 2001) ((emacs (27 1))) "RPM spec mode for Emacs/XEmacs." tar])
 (rtags . [(3 23) nil "A front-end for rtags" tar])
 (s . [(1 13 0) nil "The long lost Emacs string manipulation library." tar])
 (seq . [(2 24) nil "Sequence manipulation functions" tar])
 (sesman . [(0 3 4) ((emacs (25))) "Generic Session Manager" tar])
 (shut-up . [(0 3 3) ((cl-lib (0 3)) (emacs (24))) "Shut up would you!" tar])
 (slime . [(2 31) ((emacs (24 3)) (macrostep (0 9))) "Superior Lisp Interaction Mode for Emacs." tar])
 (smart-mode-line . [(2 14) ((emacs (24 3)) (rich-minority (0 1 1))) "A color coded smart mode-line." tar])
 (smart-tabs-mode . [(1 1) nil "Intelligently indent with tabs, align with spaces!" tar])
 (smooth-scrolling . [(2 0 0) nil "Make emacs scroll smoothly" tar])
 (spinner . [(1 7 4) ((emacs (24 3))) "Add spinners and progressline for ongoing operations" tar])
 (syslog-mode . [(3 0) ((hide-lines (20130623)) (ov (20150311))) "Major-mode for viewing log files & strace output" tar])
 (track-changes . [(1 4) ((emacs (24))) "API to react to buffer modifications" tar])
 (transient . [(0 8 6) ((emacs (26 1)) (compat (30 0 0 0)) (seq (2 24))) "Transient commands." tar])
 (treemacs . [(20250105 1321) ((emacs (26 1)) (cl-lib (0 5)) (dash (2 11 0)) (s (1 12 0)) (ace-window (0 9 0)) (pfuture (1 7)) (hydra (0 13 2)) (ht (2 2)) (cfrs (1 3 2))) "A tree style file explorer package." tar])
 (treemacs-icons-dired . [(20241017 2046) ((treemacs (0 0)) (emacs (26 1))) "Treemacs icons for dired." tar])
 (treepy . [(0 1 2) ((emacs (25 1))) "Generic tree traversal tools" tar])
 (tuareg . [(3 0 1) ((emacs (26 3)) (caml (4 8))) "OCaml mode" tar])
 (use-package . [(2 4 4) ((emacs (24 3)) (bind-key (2 4))) "A configuration macro for simplifying your .emacs" tar])
 (visual-fill-column . [(2 6 3) ((emacs (25 1))) "fillmode" tar])
 (web-mode . [(17 3 20) ((emacs (23 1))) "Major mode for editing web templates." tar])
 (with-editor . [(3 4 3) ((emacs (26 1)) (compat (30 0 0 0))) "Use the Emacsclient as $EDITOR." tar])
 (ws-butler . [(0 7) nil "Unobtrusively remove trailing whitespace." tar])
 (xref . [(1 7 0) ((emacs (26 1))) "Cross-referencing commands" tar])
 (yaml . [(1 2 0) ((emacs (25 1))) "YAML parser for Elisp." tar])
 (yaml-mode . [(0 0 16) ((emacs (24 1))) "Major mode for editing YAML files" tar])
 (yasnippet . [(0 14 0) ((cl-lib (0 5))) "Yet another snippet extension for Emacs" tar])
)
